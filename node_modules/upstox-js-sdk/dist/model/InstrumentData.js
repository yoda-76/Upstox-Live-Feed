"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InstrumentData = void 0;
var _ApiClient = require("../ApiClient");
/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */

/**
 * The InstrumentData model module.
 * @module model/InstrumentData
 * @version v0
 */
class InstrumentData {
  /**
   * Constructs a new <code>InstrumentData</code>.
   * Response data for option contracts
   * @alias module:model/InstrumentData
   * @class
   */
  constructor() {}

  /**
   * Constructs a <code>InstrumentData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/InstrumentData} obj Optional instance to populate.
   * @return {module:model/InstrumentData} The populated <code>InstrumentData</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new InstrumentData();
      if (data.hasOwnProperty('name')) obj.name = _ApiClient.ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('segment')) obj.segment = _ApiClient.ApiClient.convertToType(data['segment'], 'String');
      if (data.hasOwnProperty('exchange')) obj.exchange = _ApiClient.ApiClient.convertToType(data['exchange'], 'String');
      if (data.hasOwnProperty('isin')) obj.isin = _ApiClient.ApiClient.convertToType(data['isin'], 'String');
      if (data.hasOwnProperty('expiry')) obj.expiry = _ApiClient.ApiClient.convertToType(data['expiry'], 'Date');
      if (data.hasOwnProperty('country')) obj.country = _ApiClient.ApiClient.convertToType(data['country'], 'String');
      if (data.hasOwnProperty('latency')) obj.latency = _ApiClient.ApiClient.convertToType(data['latency'], 'String');
      if (data.hasOwnProperty('description')) obj.description = _ApiClient.ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('currency')) obj.currency = _ApiClient.ApiClient.convertToType(data['currency'], 'String');
      if (data.hasOwnProperty('weekly')) obj.weekly = _ApiClient.ApiClient.convertToType(data['weekly'], 'Boolean');
      if (data.hasOwnProperty('instrument_key')) obj.instrumentKey = _ApiClient.ApiClient.convertToType(data['instrument_key'], 'String');
      if (data.hasOwnProperty('exchange_token')) obj.exchangeToken = _ApiClient.ApiClient.convertToType(data['exchange_token'], 'String');
      if (data.hasOwnProperty('trading_symbol')) obj.tradingSymbol = _ApiClient.ApiClient.convertToType(data['trading_symbol'], 'String');
      if (data.hasOwnProperty('short_name')) obj.shortName = _ApiClient.ApiClient.convertToType(data['short_name'], 'String');
      if (data.hasOwnProperty('tick_size')) obj.tickSize = _ApiClient.ApiClient.convertToType(data['tick_size'], 'Number');
      if (data.hasOwnProperty('lot_size')) obj.lotSize = _ApiClient.ApiClient.convertToType(data['lot_size'], 'Number');
      if (data.hasOwnProperty('instrument_type')) obj.instrumentType = _ApiClient.ApiClient.convertToType(data['instrument_type'], 'String');
      if (data.hasOwnProperty('freeze_quantity')) obj.freezeQuantity = _ApiClient.ApiClient.convertToType(data['freeze_quantity'], 'Number');
      if (data.hasOwnProperty('underlying_key')) obj.underlyingKey = _ApiClient.ApiClient.convertToType(data['underlying_key'], 'String');
      if (data.hasOwnProperty('underlying_type')) obj.underlyingType = _ApiClient.ApiClient.convertToType(data['underlying_type'], 'String');
      if (data.hasOwnProperty('underlying_symbol')) obj.underlyingSymbol = _ApiClient.ApiClient.convertToType(data['underlying_symbol'], 'String');
      if (data.hasOwnProperty('last_trading_date')) obj.lastTradingDate = _ApiClient.ApiClient.convertToType(data['last_trading_date'], 'Date');
      if (data.hasOwnProperty('strike_price')) obj.strikePrice = _ApiClient.ApiClient.convertToType(data['strike_price'], 'Number');
      if (data.hasOwnProperty('price_quote_unit')) obj.priceQuoteUnit = _ApiClient.ApiClient.convertToType(data['price_quote_unit'], 'String');
      if (data.hasOwnProperty('qty_multiplier')) obj.qtyMultiplier = _ApiClient.ApiClient.convertToType(data['qty_multiplier'], 'Number');
      if (data.hasOwnProperty('minimum_lot')) obj.minimumLot = _ApiClient.ApiClient.convertToType(data['minimum_lot'], 'Number');
      if (data.hasOwnProperty('start_time')) obj.startTime = _ApiClient.ApiClient.convertToType(data['start_time'], 'String');
      if (data.hasOwnProperty('end_time')) obj.endTime = _ApiClient.ApiClient.convertToType(data['end_time'], 'String');
      if (data.hasOwnProperty('week_days')) obj.weekDays = _ApiClient.ApiClient.convertToType(data['week_days'], 'String');
      if (data.hasOwnProperty('general_denominator')) obj.generalDenominator = _ApiClient.ApiClient.convertToType(data['general_denominator'], 'Number');
      if (data.hasOwnProperty('general_numerator')) obj.generalNumerator = _ApiClient.ApiClient.convertToType(data['general_numerator'], 'Number');
      if (data.hasOwnProperty('price_numerator')) obj.priceNumerator = _ApiClient.ApiClient.convertToType(data['price_numerator'], 'Number');
      if (data.hasOwnProperty('price_denominator')) obj.priceDenominator = _ApiClient.ApiClient.convertToType(data['price_denominator'], 'Number');
      if (data.hasOwnProperty('mtf_enabled')) obj.mtfEnabled = _ApiClient.ApiClient.convertToType(data['mtf_enabled'], 'Boolean');
      if (data.hasOwnProperty('mtf_bracket')) obj.mtfBracket = _ApiClient.ApiClient.convertToType(data['mtf_bracket'], 'Number');
      if (data.hasOwnProperty('security_type')) obj.securityType = _ApiClient.ApiClient.convertToType(data['security_type'], 'String');
    }
    return obj;
  }
}

/**
 * @member {String} name
 */
exports.InstrumentData = InstrumentData;
InstrumentData.prototype.name = undefined;

/**
 * @member {String} segment
 */
InstrumentData.prototype.segment = undefined;

/**
 * @member {String} exchange
 */
InstrumentData.prototype.exchange = undefined;

/**
 * @member {String} isin
 */
InstrumentData.prototype.isin = undefined;

/**
 * @member {Date} expiry
 */
InstrumentData.prototype.expiry = undefined;

/**
 * @member {String} country
 */
InstrumentData.prototype.country = undefined;

/**
 * @member {String} latency
 */
InstrumentData.prototype.latency = undefined;

/**
 * @member {String} description
 */
InstrumentData.prototype.description = undefined;

/**
 * @member {String} currency
 */
InstrumentData.prototype.currency = undefined;

/**
 * @member {Boolean} weekly
 */
InstrumentData.prototype.weekly = undefined;

/**
 * @member {String} instrumentKey
 */
InstrumentData.prototype.instrumentKey = undefined;

/**
 * @member {String} exchangeToken
 */
InstrumentData.prototype.exchangeToken = undefined;

/**
 * @member {String} tradingSymbol
 */
InstrumentData.prototype.tradingSymbol = undefined;

/**
 * @member {String} shortName
 */
InstrumentData.prototype.shortName = undefined;

/**
 * @member {Number} tickSize
 */
InstrumentData.prototype.tickSize = undefined;

/**
 * @member {Number} lotSize
 */
InstrumentData.prototype.lotSize = undefined;

/**
 * @member {String} instrumentType
 */
InstrumentData.prototype.instrumentType = undefined;

/**
 * @member {Number} freezeQuantity
 */
InstrumentData.prototype.freezeQuantity = undefined;

/**
 * @member {String} underlyingKey
 */
InstrumentData.prototype.underlyingKey = undefined;

/**
 * @member {String} underlyingType
 */
InstrumentData.prototype.underlyingType = undefined;

/**
 * @member {String} underlyingSymbol
 */
InstrumentData.prototype.underlyingSymbol = undefined;

/**
 * @member {Date} lastTradingDate
 */
InstrumentData.prototype.lastTradingDate = undefined;

/**
 * @member {Number} strikePrice
 */
InstrumentData.prototype.strikePrice = undefined;

/**
 * @member {String} priceQuoteUnit
 */
InstrumentData.prototype.priceQuoteUnit = undefined;

/**
 * @member {Number} qtyMultiplier
 */
InstrumentData.prototype.qtyMultiplier = undefined;

/**
 * @member {Number} minimumLot
 */
InstrumentData.prototype.minimumLot = undefined;

/**
 * @member {String} startTime
 */
InstrumentData.prototype.startTime = undefined;

/**
 * @member {String} endTime
 */
InstrumentData.prototype.endTime = undefined;

/**
 * @member {String} weekDays
 */
InstrumentData.prototype.weekDays = undefined;

/**
 * @member {Number} generalDenominator
 */
InstrumentData.prototype.generalDenominator = undefined;

/**
 * @member {Number} generalNumerator
 */
InstrumentData.prototype.generalNumerator = undefined;

/**
 * @member {Number} priceNumerator
 */
InstrumentData.prototype.priceNumerator = undefined;

/**
 * @member {Number} priceDenominator
 */
InstrumentData.prototype.priceDenominator = undefined;

/**
 * @member {Boolean} mtfEnabled
 */
InstrumentData.prototype.mtfEnabled = undefined;

/**
 * @member {Number} mtfBracket
 */
InstrumentData.prototype.mtfBracket = undefined;

/**
 * @member {String} securityType
 */
InstrumentData.prototype.securityType = undefined;