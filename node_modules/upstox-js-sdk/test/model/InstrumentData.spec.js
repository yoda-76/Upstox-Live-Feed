/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.UpstoxClient);
  }
}(this, function(expect, UpstoxClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InstrumentData', function() {
      beforeEach(function() {
        instance = new UpstoxClient.InstrumentData();
      });

      it('should create an instance of InstrumentData', function() {
        // TODO: update the code to test InstrumentData
        expect(instance).to.be.a(UpstoxClient.InstrumentData);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property segment (base name: "segment")', function() {
        // TODO: update the code to test the property segment
        expect(instance).to.have.property('segment');
        // expect(instance.segment).to.be(expectedValueLiteral);
      });

      it('should have the property exchange (base name: "exchange")', function() {
        // TODO: update the code to test the property exchange
        expect(instance).to.have.property('exchange');
        // expect(instance.exchange).to.be(expectedValueLiteral);
      });

      it('should have the property isin (base name: "isin")', function() {
        // TODO: update the code to test the property isin
        expect(instance).to.have.property('isin');
        // expect(instance.isin).to.be(expectedValueLiteral);
      });

      it('should have the property expiry (base name: "expiry")', function() {
        // TODO: update the code to test the property expiry
        expect(instance).to.have.property('expiry');
        // expect(instance.expiry).to.be(expectedValueLiteral);
      });

      it('should have the property country (base name: "country")', function() {
        // TODO: update the code to test the property country
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property latency (base name: "latency")', function() {
        // TODO: update the code to test the property latency
        expect(instance).to.have.property('latency');
        // expect(instance.latency).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property weekly (base name: "weekly")', function() {
        // TODO: update the code to test the property weekly
        expect(instance).to.have.property('weekly');
        // expect(instance.weekly).to.be(expectedValueLiteral);
      });

      it('should have the property instrumentKey (base name: "instrument_key")', function() {
        // TODO: update the code to test the property instrumentKey
        expect(instance).to.have.property('instrumentKey');
        // expect(instance.instrumentKey).to.be(expectedValueLiteral);
      });

      it('should have the property exchangeToken (base name: "exchange_token")', function() {
        // TODO: update the code to test the property exchangeToken
        expect(instance).to.have.property('exchangeToken');
        // expect(instance.exchangeToken).to.be(expectedValueLiteral);
      });

      it('should have the property tradingSymbol (base name: "trading_symbol")', function() {
        // TODO: update the code to test the property tradingSymbol
        expect(instance).to.have.property('tradingSymbol');
        // expect(instance.tradingSymbol).to.be(expectedValueLiteral);
      });

      it('should have the property shortName (base name: "short_name")', function() {
        // TODO: update the code to test the property shortName
        expect(instance).to.have.property('shortName');
        // expect(instance.shortName).to.be(expectedValueLiteral);
      });

      it('should have the property tickSize (base name: "tick_size")', function() {
        // TODO: update the code to test the property tickSize
        expect(instance).to.have.property('tickSize');
        // expect(instance.tickSize).to.be(expectedValueLiteral);
      });

      it('should have the property lotSize (base name: "lot_size")', function() {
        // TODO: update the code to test the property lotSize
        expect(instance).to.have.property('lotSize');
        // expect(instance.lotSize).to.be(expectedValueLiteral);
      });

      it('should have the property instrumentType (base name: "instrument_type")', function() {
        // TODO: update the code to test the property instrumentType
        expect(instance).to.have.property('instrumentType');
        // expect(instance.instrumentType).to.be(expectedValueLiteral);
      });

      it('should have the property freezeQuantity (base name: "freeze_quantity")', function() {
        // TODO: update the code to test the property freezeQuantity
        expect(instance).to.have.property('freezeQuantity');
        // expect(instance.freezeQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property underlyingKey (base name: "underlying_key")', function() {
        // TODO: update the code to test the property underlyingKey
        expect(instance).to.have.property('underlyingKey');
        // expect(instance.underlyingKey).to.be(expectedValueLiteral);
      });

      it('should have the property underlyingType (base name: "underlying_type")', function() {
        // TODO: update the code to test the property underlyingType
        expect(instance).to.have.property('underlyingType');
        // expect(instance.underlyingType).to.be(expectedValueLiteral);
      });

      it('should have the property underlyingSymbol (base name: "underlying_symbol")', function() {
        // TODO: update the code to test the property underlyingSymbol
        expect(instance).to.have.property('underlyingSymbol');
        // expect(instance.underlyingSymbol).to.be(expectedValueLiteral);
      });

      it('should have the property lastTradingDate (base name: "last_trading_date")', function() {
        // TODO: update the code to test the property lastTradingDate
        expect(instance).to.have.property('lastTradingDate');
        // expect(instance.lastTradingDate).to.be(expectedValueLiteral);
      });

      it('should have the property strikePrice (base name: "strike_price")', function() {
        // TODO: update the code to test the property strikePrice
        expect(instance).to.have.property('strikePrice');
        // expect(instance.strikePrice).to.be(expectedValueLiteral);
      });

      it('should have the property priceQuoteUnit (base name: "price_quote_unit")', function() {
        // TODO: update the code to test the property priceQuoteUnit
        expect(instance).to.have.property('priceQuoteUnit');
        // expect(instance.priceQuoteUnit).to.be(expectedValueLiteral);
      });

      it('should have the property qtyMultiplier (base name: "qty_multiplier")', function() {
        // TODO: update the code to test the property qtyMultiplier
        expect(instance).to.have.property('qtyMultiplier');
        // expect(instance.qtyMultiplier).to.be(expectedValueLiteral);
      });

      it('should have the property minimumLot (base name: "minimum_lot")', function() {
        // TODO: update the code to test the property minimumLot
        expect(instance).to.have.property('minimumLot');
        // expect(instance.minimumLot).to.be(expectedValueLiteral);
      });

      it('should have the property startTime (base name: "start_time")', function() {
        // TODO: update the code to test the property startTime
        expect(instance).to.have.property('startTime');
        // expect(instance.startTime).to.be(expectedValueLiteral);
      });

      it('should have the property endTime (base name: "end_time")', function() {
        // TODO: update the code to test the property endTime
        expect(instance).to.have.property('endTime');
        // expect(instance.endTime).to.be(expectedValueLiteral);
      });

      it('should have the property weekDays (base name: "week_days")', function() {
        // TODO: update the code to test the property weekDays
        expect(instance).to.have.property('weekDays');
        // expect(instance.weekDays).to.be(expectedValueLiteral);
      });

      it('should have the property generalDenominator (base name: "general_denominator")', function() {
        // TODO: update the code to test the property generalDenominator
        expect(instance).to.have.property('generalDenominator');
        // expect(instance.generalDenominator).to.be(expectedValueLiteral);
      });

      it('should have the property generalNumerator (base name: "general_numerator")', function() {
        // TODO: update the code to test the property generalNumerator
        expect(instance).to.have.property('generalNumerator');
        // expect(instance.generalNumerator).to.be(expectedValueLiteral);
      });

      it('should have the property priceNumerator (base name: "price_numerator")', function() {
        // TODO: update the code to test the property priceNumerator
        expect(instance).to.have.property('priceNumerator');
        // expect(instance.priceNumerator).to.be(expectedValueLiteral);
      });

      it('should have the property priceDenominator (base name: "price_denominator")', function() {
        // TODO: update the code to test the property priceDenominator
        expect(instance).to.have.property('priceDenominator');
        // expect(instance.priceDenominator).to.be(expectedValueLiteral);
      });

      it('should have the property mtfEnabled (base name: "mtf_enabled")', function() {
        // TODO: update the code to test the property mtfEnabled
        expect(instance).to.have.property('mtfEnabled');
        // expect(instance.mtfEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property mtfBracket (base name: "mtf_bracket")', function() {
        // TODO: update the code to test the property mtfBracket
        expect(instance).to.have.property('mtfBracket');
        // expect(instance.mtfBracket).to.be(expectedValueLiteral);
      });

      it('should have the property securityType (base name: "security_type")', function() {
        // TODO: update the code to test the property securityType
        expect(instance).to.have.property('securityType');
        // expect(instance.securityType).to.be(expectedValueLiteral);
      });

    });
  });

}));
